Get Min from Stack
Given q queries, You task is to implement the following four functions for a stack:

push(x) – Insert an integer x onto the stack.
pop() – Remove the top element from the stack.
peek() - Return the top element from the stack. If the stack is empty, return -1.
getMin() – Retrieve the minimum element from the stack in O(1) time. If the stack is empty, return -1.
Each query can be one of the following:

1 x : Push x onto the stack.
2 : Pop the top element from the stack.
3: Return the top element from the stack. If the stack is empty, return -1.
4: Return the minimum element from the stack.
Examples:

Input: q = 7, queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]
Output: [3, 2, 1]
Explanation: 
push(2): Stack is [2]
push(3): Stack is [2, 3]
peek(): Top element is 3
pop(): Removes 3, stack is [2]
getMin(): Minimum element is 2
push(1): Stack is [2, 1]
getMin(): Minimum element is 1

class Solution {
    
    private Stack<Integer> stack;
    private Stack<Integer> minStack;
    
    public Solution() {
        stack = new Stack<>();
        minStack=new Stack<>();
    }

    // Add an element to the top of Stack
    public void push(int x) {
        // code here
        stack.push(x);
        if(minStack.isEmpty() || x <=minStack.peek()){
            minStack.push(x);
        }
    }

    // Remove the top element from the Stack
    public void pop() {
        // code here
        if(!stack.isEmpty()){
            int top = stack.pop();
            if(!minStack.isEmpty() && top==minStack.peek()){
                minStack.pop();
            }
        }
    }

    // Returns top element of the Stack
    public int peek() {
        // code here
        return stack.isEmpty() ?-1:stack.peek();
    }

    // Finds minimum element of Stack
    public int getMin() {
        // code here
        return minStack.isEmpty() ?-1:minStack.peek();
    }
}
