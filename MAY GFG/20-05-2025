#Burning Tree
Given a binary tree and a target node, determine the minimum time required to burn the entire tree if the target node is set on fire. In one second, the fire spreads from a node to its left child, right child, and parent.
Note: The tree contains unique values.

Examples : 

Input: root[] = [1, 2, 3, 4, 5, 6, 7], target = 2
  
Output: 3
Explanation: Initially 2 is set to fire at 0 sec 
At 1 sec: Nodes 4, 5, 1 catches fire.
At 2 sec: Node 3 catches fire.
At 3 sec: Nodes 6, 7 catches fire.
It takes 3s to burn the complete tree.
Input: root[] = [1, 2, 3, 4, 5, N, 7, 8, N, 10], target = 10

Output: 5
Explanation: Initially 10 is set to fire at 0 sec 
At 1 sec: Node 5 catches fire.
At 2 sec: Node 2 catches fire.
At 3 sec: Nodes 1 and 4 catches fire.
At 4 sec: Node 3 and 8 catches fire.
At 5 sec: Node 7 catches fire.
It takes 5s to burn the complete tree.
Constraints:
1 ≤ number of nodes ≤ 105
1 ≤ node->data ≤ 105

class Solution {
    // Helper method to build parent map and find target node
    private static Node markParents(Node root, Map<Node, Node> parentMap, int target, Node[] targetNodeHolder) {
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        parentMap.put(root, null);
        
        while (!queue.isEmpty()) {
            Node current = queue.poll();
            if (current.data == target) {
                targetNodeHolder[0] = current;
            }
            if (current.left != null) {
                parentMap.put(current.left, current);
                queue.offer(current.left);
            }
            if (current.right != null) {
                parentMap.put(current.right, current);
                queue.offer(current.right);
            }
        }
        return root;
    }

    public static int minTime(Node root, int target) {
        // Step 1: Create parent map and find target node
        Map<Node, Node> parentMap = new HashMap<>();
        Node[] targetNodeHolder = new Node[1];
        markParents(root, parentMap, target, targetNodeHolder);
        
        // Step 2: BFS from target node
        Queue<Node> queue = new LinkedList<>();
        Set<Node> visited = new HashSet<>();
        queue.offer(targetNodeHolder[0]);
        visited.add(targetNodeHolder[0]);
        
        int time = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean burnedAny = false;
            for (int i = 0; i < size; i++) {
                Node current = queue.poll();
                // Check left
                if (current.left != null && !visited.contains(current.left)) {
                    queue.offer(current.left);
                    visited.add(current.left);
                    burnedAny = true;
                }
                // Check right
                if (current.right != null && !visited.contains(current.right)) {
                    queue.offer(current.right);
                    visited.add(current.right);
                    burnedAny = true;
                }
                // Check parent
                Node parent = parentMap.get(current);
                if (parent != null && !visited.contains(parent)) {
                    queue.offer(parent);
                    visited.add(parent);
                    burnedAny = true;
                }
            }
            if (burnedAny) time++;
        }
        return time;
    }
}


