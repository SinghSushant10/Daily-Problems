#Sort the given array after applying the given equation
Given an integer array arr[] sorted in ascending order, along with three integers: A, B, and C. The task is to transform each element x in the array using the quadratic function A*(x2) + B*x + C. After applying this transformation to every element, return the modified array in sorted order.

Examples:

Input: arr[] = [-4, -2, 0, 2, 4], A = 1, B = 3, C = 5
Output: [3, 5, 9, 15, 33]
Explanation: After applying f(x) = 1*(x2)+ 3*x + 5 to each x, we get [9, 3, 5, 15, 33]. After sorting this array, the array becomes [3, 5, 9, 15, 33].
Input: arr[] = [-3, -1, 2, 4], A = -1, B = 0, C = 0
Output: [-16, -9, -4, -1]
Explanation: After applying f(x) = -1*(x2) + 0*x + 0 to each x, we get [ -9, -1, -4, -16 ]. After sorting this array, the array becomes  [-16, -9, -4, -1].
Constraints:
1 ≤ arr.size() ≤ 106
-103 ≤ arr[i], A, B, C ≤ 103

class Solution {
    public ArrayList<Integer> sortArray(int[] arr, int A, int B, int C) {
        int n = arr.length;
        ArrayList<Integer> result = new ArrayList<>(n);
        
        // Temporary array to fill values
        int[] temp = new int[n];
        int i = 0, j = n - 1;
        int index = A >= 0 ? n - 1 : 0; // Fill from end if A > 0, else from start

        while (i <= j) {
            int val1 = compute(arr[i], A, B, C);
            int val2 = compute(arr[j], A, B, C);
            if (A >= 0) {
                // Put larger value at the end
                if (val1 > val2) {
                    temp[index--] = val1;
                    i++;
                } else {
                    temp[index--] = val2;
                    j--;
                }
            } else {
                // Put smaller value at the beginning
                if (val1 < val2) {
                    temp[index++] = val1;
                    i++;
                } else {
                    temp[index++] = val2;
                    j--;
                }
            }
        }

        for (int val : temp) result.add(val);
        return result;
    }

    private int compute(int x, int A, int B, int C) {
        return A * x * x + B * x + C;
    }
}

