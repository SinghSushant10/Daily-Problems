#Insert in Sorted Circular Linked List

Given a sorted circular linked list, the task is to insert a new node in this circular linked list so that it remains a sorted circular linked list.

Examples:

Input: head = 1->2->4, data = 2
Output: 1->2->2->4
Explanation: We can add 2 after the second node.

Input: head = 1->4->7->9, data = 5
Output: 1->4->5->7->9
Explanation: We can add 5 after the second node.

Constraints:
2 <= number of nodes <= 106
0 <= node->data <= 106
0 <= data <= 106

class Solution {
    public Node sortedInsert(Node head, int data) {
        // code here
        Node prev = null;
        Node node = head;
        
        do {
            prev = node;
            node = node.next;
        } while(node != head);
        
        
        while(node.data < data) {
            node = node.next;
            prev = prev.next;
            if(node == head) {
                break;
            }
        }
        
        Node newNode = new Node(data);
        prev.next = newNode;
        newNode.next = node;
        
        if(head.data > data) {
            return newNode;
        } else {
            return head;
        }
    }
}
