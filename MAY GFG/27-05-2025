#Print leaf nodes from preorder traversal of BST
Given a preorder traversal of a BST, find the leaf nodes of the tree without building the tree.
Examples:

Input: preorder[] = [5, 2, 10]
Output: [2, 10]
Explaination: 

2 and 10 are the leaf nodes as shown in the figure.
Input: preorder[] = [4, 2, 1, 3, 6, 5]
Output: [1, 3, 5]
Explaination: 

1, 3 and 5 are the leaf nodes as shown in the figure.
Input: preorder[] = [8, 2, 5, 10, 12]
Output: [5, 12]
Explaination: 

5 and 12 are the leaf nodes as shown in the figure.

Constraints:
1 ≤ preorder.size() ≤ 103
1 ≤ preorder[i] ≤ 103


class Solution {

    public ArrayList<Integer> leafNodes(int[] preorder) {
        Stack<Integer> s = new Stack<>();
        ArrayList<Integer> leaves = new ArrayList<>();
        int n = preorder.length;

        for (int i = 0, j = 1; j < n; i++, j++) {
            boolean found = false;
            if (preorder[i] > preorder[j]) {
                s.push(preorder[i]);
            } else {
                while (!s.isEmpty()) {
                    if (preorder[j] > s.peek()) {
                        s.pop();
                        found = true;
                    } else {
                        break;
                    }
                }
            }
            if (found) {
                leaves.add(preorder[i]);
            }
        }
        leaves.add(preorder[n - 1]);

        return leaves;
    }
}
