#Smallest Divisor
Given an integer array arr[] and an integer k (where k ≥ arr.length), find the smallest positive integer divisor such that the sum of the ceiling values of each element in arr[] divided by this divisor is less than or equal to k.

Examples:

Input: arr[] = [1, 2, 5, 9], k = 6
Output: 5
Explanation: 5 is the smallest divisor having sum of quotients (1 + 1 + 1 + 2 = 5) less than or equal to 6.
Input: arr[] = [1, 1, 1, 1], k = 4
Output: 1
Explanation: 1 is the smallest divisor having sum of quotients (1 + 1 + 1 + 1 = 4) less than or equal to 4.
Constraints:
1  ≤  arr.size()  ≤ 105
1  ≤  arr[i]  ≤ 106
arr.size()  ≤ k  ≤ 106

class Solution {
    int smallestDivisor(int[] arr, int k) {
        int left = 1, right = getMax(arr);
        int answer = right;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (getSum(arr, mid) <= k) {
                answer = mid;       // potential answer, try smaller
                right = mid - 1;
            } else {
                left = mid + 1;     // need larger divisor
            }
        }
        return answer;
    }

    // Helper to calculate the sum of ceilings
    private int getSum(int[] arr, int divisor) {
        int sum = 0;
        for (int num : arr) {
            sum += (num + divisor - 1) / divisor;  // same as ceil(num / divisor)
        }
        return sum;
    }

    // Helper to get the maximum element in array
    private int getMax(int[] arr) {
        int max = arr[0];
        for (int num : arr) {
            if (num > max) max = num;
        }
        return max;
    }
}
