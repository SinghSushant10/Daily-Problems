#Sum-string
Given a string s consisting of digits, determine whether it can be classified as a sum-string.

A sum-string is a string that can be split into more than two non-empty substrings such that:


The rightmost substring is equal to the sum of the two substrings immediately before it (interpreted as integers).

This condition must apply recursively to the substrings before it.

The rightmost substring (and any number in the sum) must not contain leading zeroes, unless the number is exactly '0'.

Examples:

Input: s = "12243660"
Output: true
Explanation: The string can be split as {"12", "24", "36", "60"} where each number is the sum of the two before it:
36 = 12 + 24, and 60 = 24 + 36. Hence, it is a sum-string.
Input: s = "1111112223"
Output: true
Explanation: Split the string as {"1", "111", "112", "223"}, where:
112 = 1 + 111 and 223 = 111 + 112. Hence, it follows the sum-string rule.
Input: s = "123456"
Output: false
Explanation: There is no valid split of the string such that each part satisfies the sum-string property recursively.
Constraints:
1 ≤ s.size() ≤ 100
String consists of characters from '0' to '9'.

class Solution {
    public boolean isSumString(String s) {
        int n = s.length();
        
        // Try all combinations of first and second numbers
        for (int i = 1; i <= n / 2; i++) {
            for (int j = 1; Math.max(i, j) <= n - i - j; j++) {
                String s1 = s.substring(0, i);
                String s2 = s.substring(i, i + j);
                
                // Skip if numbers have leading zeros
                if ((s1.startsWith("0") && s1.length() > 1) || 
                    (s2.startsWith("0") && s2.length() > 1))
                    continue;

                if (isValid(s1, s2, s.substring(i + j)))
                    return true;
            }
        }
        return false;
    }

    private boolean isValid(String s1, String s2, String remaining) {
        if (remaining.length() == 0) return true;

        String sum = addStrings(s1, s2);

        // Check if the remaining string starts with the sum
        if (!remaining.startsWith(sum)) return false;

        return isValid(s2, sum, remaining.substring(sum.length()));
    }

    // Function to add large numbers as strings
    private String addStrings(String num1, String num2) {
        StringBuilder sb = new StringBuilder();
        int carry = 0, i = num1.length() - 1, j = num2.length() - 1;
        
        while (i >= 0 || j >= 0 || carry > 0) {
            int sum = carry;
            if (i >= 0) sum += num1.charAt(i--) - '0';
            if (j >= 0) sum += num2.charAt(j--) - '0';
            sb.append(sum % 10);
            carry = sum / 10;
        }

        return sb.reverse().toString();
    }
}
