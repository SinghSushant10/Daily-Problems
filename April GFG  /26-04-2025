You are given a binary tree, and the task is to determine whether it satisfies the properties of a max-heap.

A binary tree is considered a max-heap if it satisfies the following conditions:

Completeness: Every level of the tree, except possibly the last, is completely filled, and all nodes are as far left as possible.
Max-Heap Property: The value of each node is greater than or equal to the values of its children.
Examples:

Input: root[] = [97, 46, 37, 12, 3, 7, 31, 6, 9]
 
Output: true
Explanation: The tree is complete and satisfies the max-heap property.
Input: root[] = [97, 46, 37, 12, 3, 7, 31, N, 2, 4] 
 
Output: false
Explanation: The tree is not complete and does not follow the Max-Heap Property, hence it is not a max-heap.
Constraints:
1 ≤ number of nodes ≤ 103
1 ≤ node->data ≤ 103

class Solution {
    boolean isHeap(Node tree) {
        int ndes=totcntr(tree);
        return checker(tree,1,ndes);
    }
    int totcntr(Node tree){
        if(tree==null){
            return 0;
        }
        return 1+totcntr(tree.right)+totcntr(tree.left);
    }
    boolean checker(Node tree,int ind,int lim){
        if(tree==null){
            return true;
        }
        if(ind>lim){
           return false; 
        }
        if(tree.left!=null&&tree.left.data>tree.data){
            return false;
        }
        if(tree.right!=null&&tree.right.data>tree.data){
            return false;
        }
        return checker(tree.left,ind*2,lim)&&checker(tree.right,ind*2+1,lim);
    }
}
