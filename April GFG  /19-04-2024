# Maximum XOR of two numbers in an array

Given an array arr[] of non-negative integers of size n. Find the maximum possible XOR between two numbers present in the array.

Examples:

Input: arr[] = [25, 10, 2, 8, 5, 3]
Output: 28
Explanation: The maximum possible XOR is 5 ^ 25 = 28.
Input: arr[] = [1, 2, 3, 4, 5, 6, 7]
Output: 7
Explanation : The maximum possible XOR is 1 ^ 6 = 7.
Constraints:
2 ≤ arr.size() ≤ 5*104
1 ≤ arr[i] ≤ 106

class Solution {
    public int maxXor(int[] arr) {
        int maxXor = 0;
        int mask = 0;

        // We go from the highest bit to the lowest (assuming 20 bits for numbers <= 10^6)
        for (int i = 20; i >= 0; i--) {
            mask |= (1 << i);
            Set<Integer> prefixes = new HashSet<>();

            // Store prefixes with current mask
            for (int num : arr) {
                prefixes.add(num & mask);
            }

            // Try to set the current bit in maxXor
            int temp = maxXor | (1 << i);
            for (int prefix : prefixes) {
                if (prefixes.contains(prefix ^ temp)) {
                    maxXor = temp;
                    break;
                }
            }
        }

        return maxXor;
    }
}
